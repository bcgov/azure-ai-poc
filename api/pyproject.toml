[project]
name = "azure-ai-poc-api"
version = "0.1.0"
description = "Azure AI POC FastAPI Backend - Document management and chat functionality with Azure OpenAI"
requires-python = ">=3.11"
dependencies = [
    # FastAPI framework and server
    "fastapi[standard]~=0.116.1",
    "uvicorn[standard]>=0.32.0",
    # Authentication and Security
    "python-jose[cryptography]>=3.3.0", # JWT handling
    "python-multipart>=0.0.12", # Form data parsing
    "passlib[bcrypt]>=1.7.4", # Password hashing
    "cryptography>=42.0.0", # Crypto operations
    # Azure SDK
    "azure-cosmos>=4.7.0", # Cosmos DB client
    "azure-identity>=1.19.0", # Azure authentication
    "azure-storage-blob>=12.23.1", # Blob storage (if needed)
    # OpenAI and AI
    "openai>=1.51.0", # OpenAI client
    # Document processing
    "pypdf>=4.3.1", # PDF parsing (replacement for pdf-parse)
    "python-magic>=0.4.27", # File type detection
    # HTTP and networking
    "httpx>=0.27.2", # HTTP client
    "requests>=2.32.3", # HTTP requests
    # Configuration and environment
    "pydantic>=2.9.0", # Data validation
    "pydantic-settings>=2.5.2", # Settings management
    "python-dotenv>=1.0.0", # Environment variables
    # Monitoring and observability
    "prometheus-client>=0.21.0", # Prometheus metrics
    "opentelemetry-api>=1.27.0", # OpenTelemetry tracing
    "opentelemetry-sdk>=1.27.0",
    "opentelemetry-instrumentation-fastapi>=0.48b0",
    "opentelemetry-instrumentation-httpx>=0.48b0",
    "opentelemetry-exporter-otlp>=1.27.0",
    # Logging
    "structlog>=24.4.0", # Structured logging
    # Rate limiting and middleware
    "slowapi>=0.1.9", # Rate limiting for FastAPI
    "redis>=5.1.0", # Redis for rate limiting backend
    # Utilities
    "click>=8.1.7", # CLI framework
    "rich>=13.8.1", # Rich text and pretty printing
    "beautifulsoup4>=4.13.5",
    "pypdf>=5.1.0",
    "markdownify>=1.2.0",
    "opentelemetry-instrumentation-requests>=0.58b0",
    "psutil>=7.0.0",
    "mcp>=1.0.0",
    "azure-search-documents>=11.5.3",
    # LangGraph and minimal LangChain for agentic AI capabilities
    "langchain-openai>=0.3.33",
    "langchain-community>=0.3.29",
    "langgraph>=0.6.7",
    "langchain-core>=0.3.76",
    # Agent Lightning for agent optimization
    "agentlightning>=0.1.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "coverage>=7.10.6",                  # Coverage.py for pytest-cov
    "httpx>=0.27.2",                     # For testing HTTP endpoints
    
    # Code quality
    "ruff>=0.7.0",                       # Linting and formatting
    "mypy>=1.11.0",                      # Type checking
    "pre-commit>=4.0.0",                 # Git hooks
    
    # Development tools
    "ipython>=8.27.0",                   # Interactive Python
    "ipdb>=0.13.13",                     # Debugger
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.ruff]
line-length = 100  # Increased from 88 to be more practical for modern development
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "B008",  # Do not perform function calls in argument defaults (FastAPI dependency injection)
]
[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=app --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
# Fail build if coverage falls below thresholds
fail_under = 35

exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Coverage thresholds by module type
[tool.coverage.paths]
source = ["app"]

# Custom coverage requirements for specific modules
# Core modules (cache, config, logger, telemetry) should maintain 75%+
# Middleware modules should maintain 75%+
# Model modules should maintain 75%+
# Integration-heavy services can be lower due to external dependencies

[dependency-groups]
dev = [
    "coverage>=7.10.6",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
]
